import { useState, useEffect } from "react"
import getConfig from "next/config";
import { Poppins } from 'next/font/google'
import { GoogleSpreadsheet } from "google-spreadsheet"
import { QrReader } from "react-qr-reader";
import CryptoJS from "crypto-js";

const doc = new GoogleSpreadsheet('1iu3Qk5y7RBsnPmX6bcALv6nP20eHMT0B8lw-7-LwDm0');

const poppins = Poppins({ subsets: ['latin'], weight: "500" })

const { publicRuntimeConfig } = getConfig();

module.exports = function Scan() {
    const [isServer, setIsServer] = useState(true)
    const [qrData, setQrData] = useState("");
    const [qrError, setQrError] = useState("");
    const [videoWeight, setVideoWeight] = useState('88vw');
    const [maxVideoWeight, setMaxVideoWeight] = useState('350px');

    async function SignServiceAccount() {
        await doc.useServiceAccountAuth({
            // env var values are copied from service account credentials generated by google
            // see "Authentication" section in docs for more info
            client_email: "bondiola@bondiolapoints.iam.gserviceaccount.com",
            private_key: "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDBOuinHLFmNKG5\n5ForWeaebPbp4DcsNxMQxuTGMj+fWgG2Vr6rDaYt7sgHvY6KP0FkMfNtuwEtvczc\nZkIRV9zeXmiIL0A8LG9Y8xLZ0euvsQxhsloucvLA27692KSA+cyOkzzrfn+DEsoD\nzoziq7d7eLS5m+p6i8oYVcesUSWsQToAHvqwS5P6H2Y58I+wQEPu59F9iV+VzJV3\nY/k5IQlGZkZv8snRVs/27/1a+2Ag5BFeShE61M7pOfV5P48ZfyrOoSfei9vtPoQM\n6U1u+e2jsLl2BKlqjfuDl9g2P01ZYCqePHV12ovcInIuIj+lXNahuzaktIHBDAMU\nKkYXMyyzAgMBAAECggEARkMb7wwta4su1Y/1w7a0d54KqJ9ZoI/ENIEGFhWWceTC\nI6HmQf+8Eg62GK5yQs3egsbxC9EIjC/saqYaVwEadJdirkZ0No03zeHRVHgTGfco\nl+vJBAPTRpKBCLpakvWCTsO2TrFYP3qZD4pPS2sCVHjfSnCp8fabvX6PlRaKutf5\nD3SBOT31CrDu2pXLTb5WX3mWAs3mFg/4VsGJUau7yGA7yevAWLbep/EeM7fBCeq9\ntEY8ySCarbDU25wui6+DPoghThfrmRg+Fn+bO6vKXpVMe3Ot7pFvXLe6BnJmhUvu\nRWuP1dVMUiIghXIYhjxIaIyQ1XMVs8TrzktwbiBR+QKBgQDoOFHulgGAhjFD/qMu\npPxm1zBS+gTc2qVbJCI97jlWjrXSHmE7xJkiAoo6ZqSNi7z00yZqz7zEMudYPCLE\nE+mHs3Os64xtqjnjd4cY3CZ/tEa1iABoKerB3+GUD09r97LQ6cji4JeamHIJA8Oc\nqVtSnXvlOU+8jLvuSlB6jqlw+QKBgQDVBHafJNTKkurV1J4+pWBBQhB1an5tG1Sf\nGTi3wu5MxmrIKZb83AFOH169YB6WiQ8d4tup596hZQMpcg/fnH66u+Bo4huruDyp\n6+xjtXRG6K//NKnFki4km/4VNJHysOdkQBLw1BUY1dTEas1ZfFwcf3mpedUdODHm\nNN7idQxiCwKBgHho66LoyTKZYmY9XOPMzMuOfRIpbegOv3r4y4CNS9HkAcdH1Wcm\nU7jc1Evf+Scj9ACGk/8CZIDfXDHWTLibEpY4qJxbLt+WSpn12mk7jgLduWRbdsqM\nIZwRuGgLYEU9lMzazD1H85RHw6mE+CL9dcrqudlr1DqSRsgSZJSH8LgRAoGAe22o\npjIbMn3KoLggMUB185oqGz7nnqTVdZKRsLi8h7P4r56ZpE5+WxwGM0j8sFEedzy5\n90spTu9O07cJx5HQRLcUIvHRAsEwNW1EfcnoZCXzxLZpINfA8OmKYhMh9jPW/9m4\nn97jko5kSKNx9UX/wWuDvVWgzNuA3lkIRMN5t10CgYBn8kAFPzrSUR0/1thXCYHg\nuCUNm7Q9VcA7v3XqgYl/wrAt/vGneUUbo0t8TW/0tZJPj2Qto+0wcK5hCWT+AEim\n04slfOVDg0d5XG4evR5F5MZNoI7ed8vqlrE+8gAzAnatiLyXdUrWlmG4LCc0AITD\nOucpGCxoLLJ/W/6Bk6rbzQ==\n-----END PRIVATE KEY-----\n",
        });

        await doc.loadInfo(); // loads document properties and worksheets
    }

    useEffect(() => {

        SignServiceAccount();

    }, [])

    return <div style={{ width: "100vw", height: '100vh', textAlign: "center", display: "table-cell", verticalAlign: "middle" }}>


        <div style={{ margin: '0px auto' }}>

            {qrData == "" && qrError == "" ?
                <>
                    <p className={poppins.className} style={{ padding: "20px 0", fontSize: "min(8vw,40px)" }}>Escaneá el código QR</p>

                    <QR setQrData={setQrData} setQrError={setQrError} qrData={qrData} qrError={qrError} videoWeight={videoWeight} maxVideoWeight={maxVideoWeight} />
                </>
                :
                <>
                    {qrError == '' ?

                        <EmailInput code={qrData} />
                        :
                        <SomeError message={"Ocurrió un error, vuelve a intentarlo"} />
                    }
                </>
            }
            {/* <EmailInput code={'U2FsdGVkX1+sHMOUmJK0wryTKDa+kEGC0Coe+l6V2B0='} /> */}
        </div>


    </div>
}


function PointsAdded() {
    return <>

        <p className={poppins.className} style={{ padding: "20px 20px", fontSize: "min(8vw,40px)" }}>Recibiste 1 punto. Felicidades señor.</p>

    </>
}

function SomeError({ message }) {
    return <>

        <p className={poppins.className} style={{ padding: "20px 20px", fontSize: "min(8vw,40px)" }}>{message}</p>

    </>
}


function EmailInput({ code }) {

    const [loading, setLoading] = useState(false);
    const [pointsError, setPointsError] = useState({ error: false, body: <></> });
    const [pointsAdded, setPointsAdded] = useState(false);

    const handleError = async (error) => {
        switch (error) {
            case 'uknown':
                setPointsError({ error: true, body: <SomeError message={"Ocurrió un error, vuelve a intentarlo"} /> })
                break;
            case 'code_used':
                setPointsError({ error: true, body: <SomeError message={"El código escaneado ya fué usado"} /> })
                break;
            case 'code_invalid':
                setPointsError({ error: true, body: <SomeError message={"El código escaneado es inválido"} /> })
        }
    }

    const handleDone = async () => {
        setPointsAdded(true);
    }

    // Handles the submit event on form submit.
    const handleSubmit = async (event) => {

        event.preventDefault();
        setLoading(true);
        TryToPut(code, event.target[0].value, handleError, handleDone);
    }

    return <div>

        {pointsError.error ?
            pointsError.body
            :
            <>
                {pointsAdded ?

                    <PointsAdded />
                    :

                    <>
                        <form onSubmit={handleSubmit}>
                            <input type="email" name="email" id="userEmail" className={poppins.className} placeholder="Correo electrónico" required style={{ width: "min(85vw,350px)", height: "min(20vw, 50px)", margin: "10px 0", padding: "0 10px", textAlign: "center", fontSize: "min(5vw,20px)" }} />
                            <button type="submit" className={poppins.className} style={{ width: "min(35vw, 100px)", height: "min(20vw, 50px)", margin: "10px 0", fontSize: "min(7vw,20px)" }}>Enviar</button>
                        </form>
                        {loading ? <p className={poppins.className} style={{ margin: "10px 0", fontSize: "min(7vw,20px)" }}>Cargando...</p> : <></>}
                    </>
                }
            </>
        }


    </div>
}


function QR({ setQrData, setQrError, qrData, qrError, videoWeight, maxVideoWeight }) {

    return <div style={{ width: "100vw", textAlign: "center", padding: "10px 0px" }}>

        <div style={{ width: videoWeight, height: videoWeight, maxWidth: maxVideoWeight, maxHeight: maxVideoWeight, margin: "0px auto" }}>

            <QrReader
                onResult={(result, error) => {
                    if (!!result) {
                        setQrData(result?.text);
                    }

                    if (!!error) {
                        /* setQrError(error.message); */
                    }

                }
                }
                //this is facing mode : "environment " it will open backcamera of the smartphone and if not found will 
                // open the front camera
                constraints={{ facingMode: "environment" }}
                videoStyle={{ width: "100%", height: "100%", objectFit: "cover" }}
                videoContainerStyle={{ width: "100%", height: "100%", background: "#222" }}
                containerStyle={{ width: "100%", height: "100%", background: "#aaa" }}
            />
        </div>

        {/* <p style={{ padding: "20px 0" }}>Qr data: {qrData}</p> */}

    </div>
}


async function TryToPut(code, user, handleError, handleDone) {

    const pointSheet = doc.sheetsById[0];

    await pointSheet.loadCells('A1:B1');

    var originalCode = '';
    try {
        originalCode = CryptoJS.AES.decrypt(code, publicRuntimeConfig.SECRET_PASSWORD).toString(CryptoJS.enc.Utf8);
    } catch {
        handleError('code_invalid')
        return;
    }

    if (!(await CodeValid(originalCode))) {
        handleError('code_invalid');
        return;
    }

    var codeUsed = await CodeUsed(originalCode);
    if (!codeUsed) {

        // Seguir
        if (await AddCode(originalCode)) {
            if (await AddPointsToUser(user)) {

                handleDone();
                return;

            } else {
                handleError('uknown');
                return;
            }

        } else {

            handleError('uknown');
            return;

        }

    } else {
        handleError('code_used')
        return;
    }


}

async function CodeUsed(code) {
    const pointSheet = doc.sheetsById[0];

    const otherCell = pointSheet.getCell(0, 1);
    const otherCellJSON = JSON.parse(otherCell.value);

    var response = false;

    for (let i = 0; i < otherCellJSON.usedCodes.length; i++) {
        if (otherCellJSON.usedCodes[i] == code) {
            response = true;
            break;
        }
    }

    return response;
}

async function CodeValid(code) {
    if (code.charAt(0) == '0' && code.charAt(Math.trunc(code.length / 2)) == '0' && code.charAt(code.length - 1) == '0') {
        return true;
    } else {
        return false;
    }

}

async function AddPointsToUser(user) {
    const pointSheet = doc.sheetsById[0];

    const usersCell = pointSheet.getCell(0, 0)
    const usersCellJSON = JSON.parse(usersCell.value);
    const otherCell = pointSheet.getCell(0, 1);
    const otherCellJSON = JSON.parse(otherCell.value);

    var userExists = {
        exists: false,
        index: null
    };

    for (let i = 0; i < usersCellJSON.users.length; i++) {
        if (usersCellJSON.users[i].user == user) {
            userExists.exists = true;
            userExists.index = i;
            break;
        }
    }

    if (userExists.exists) {
        usersCellJSON.users[userExists.index].points = usersCellJSON.users[userExists.index].points + 1;
    } else {
        usersCellJSON.users.push({ "user": user, "points": 1 });
        otherCellJSON.userLength += 1;
    }

    usersCell.value = JSON.stringify(usersCellJSON);
    otherCell.value = JSON.stringify(otherCellJSON);


    try {
        await pointSheet.saveUpdatedCells()
        return true;
    } catch
    {
        return false;
    }

}

async function AddCode(code) {
    const pointSheet = doc.sheetsById[0];

    const otherCell = pointSheet.getCell(0, 1)
    const otherCellJSON = JSON.parse(otherCell.value);

    try {
        otherCellJSON.usedCodes.push(code);
        otherCell.value = JSON.stringify(otherCellJSON);
        await pointSheet.saveUpdatedCells()
        return true;
    } catch
    {
        return false;
    }
}



function GetSheetData() {

    const [sheetName, setSheetName] = useState('');
    const [names, setNames] = useState([]);
    const [codes, setCodes] = useState([]);

    async function GetSheetData() {

        var pointSheet = doc.sheetsByIndex[0];
        setSheetName(pointSheet.title);
        await pointSheet.loadCells('A1:A1');
        await pointSheet.loadCells('B1:B1');

        const usersCell = pointSheet.getCell(0, 0);
        const usersCellJSON = JSON.parse(usersCell.value);

        const otherCell = pointSheet.getCell(0, 1);
        const otherCellJSON = JSON.parse(otherCell.value);

        setNames(usersCellJSON.users);
        setCodes(otherCellJSON.usedCodes);
    }

    async function RemoveLastCode() {
        var pointSheet = doc.sheetsByIndex[0];

        await pointSheet.loadCells('B1:B1');

        const otherCell = pointSheet.getCell(0, 1);
        const otherCellJSON = JSON.parse(otherCell.value);

        otherCellJSON.usedCodes.pop();
        otherCell.value = JSON.stringify(otherCellJSON);

        await pointSheet.saveUpdatedCells();

        setCodes(otherCellJSON.usedCodes);
    }


    return <div style={{ padding: "10px 0" }}>

        <button onClick={GetSheetData}>Get Sheet Data</button>
        <p>Sheet name: {sheetName}</p>
        {/* SHOW USERS */}
        {names.length > 0 ?

            <div>
                <p>{names.length} usuario/s encontrados</p>
                <ul>
                    {
                        names.map((value, index) => {
                            return <li key={index}>

                                <p>User: {value.user} | Points: {value.points}</p>

                            </li>
                        })
                    }
                </ul>

            </div>

            :


            <p>No users</p>}

        {/* SHOW USED CODES */}
        {codes.length > 0 ?

            <div>
                <p>{codes.length} código/s usado/s encontrado/s</p>
                <ul>
                    {
                        codes.map((value, index) => {
                            return <li key={index}>

                                <p>{value}</p>

                            </li>
                        })
                    }
                </ul>
                <button onClick={RemoveLastCode}>Remove last code</button>

            </div>

            :


            <p>No used codes</p>}

    </div>
}